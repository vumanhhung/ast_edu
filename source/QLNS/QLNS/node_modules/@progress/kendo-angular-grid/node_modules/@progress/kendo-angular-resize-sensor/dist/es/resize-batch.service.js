import { Injectable, NgZone } from '@angular/core';
/**
 * @hidden
 */
var ResizeBatchService = /** @class */ (function () {
    function ResizeBatchService(ngZone) {
        this.ngZone = ngZone;
        this.scheduled = [];
    }
    ResizeBatchService.prototype.schedule = function (instance, method) {
        var _this = this;
        this.scheduled.push({ instance: instance, method: method });
        this.ngZone.runOutsideAngular(function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
                _this.scheduled.forEach(function (item) {
                    item.method.call(item.instance);
                });
                _this.scheduled = [];
            }, 0);
        });
    };
    ResizeBatchService.prototype.isScheduled = function (instance) {
        return Boolean(this.scheduled.find(function (item) { return item.instance === instance; }));
    };
    ResizeBatchService.prototype.cancel = function (instance) {
        var scheduled = this.scheduled;
        var count = scheduled.length;
        for (var idx = 0; idx < count; idx++) {
            if (scheduled[idx].instance === instance) {
                scheduled.splice(idx, 1);
                if (!scheduled.length) {
                    clearTimeout(this.timeout);
                }
                return;
            }
        }
    };
    ResizeBatchService.prototype.ngOnDestroy = function () {
        clearTimeout(this.timeout);
    };
    ResizeBatchService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ResizeBatchService.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    return ResizeBatchService;
}());
export { ResizeBatchService };
