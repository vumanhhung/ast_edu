import { OnChanges, SimpleChange } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { ConfigurationService } from './common/configuration.service';
import { DragAction, AxisDefaults, CategoryAxis, ChartArea, Legend, Pane, PlotArea, Series, SeriesDefaults, Title, Tooltip, ValueAxis, XAxis, YAxis, Zoomable } from './common/property-types';
import { AxisLabelClickEvent } from './events/axis-label-click-event';
import { DragEndEvent } from './events/drag-end-event';
import { DragEvent } from './events/drag-event';
import { DragStartEvent } from './events/drag-start-event';
import { LegendItemHoverEvent } from './events/legend-item-hover-event';
import { LegendItemLeaveEvent } from './events/legend-item-leave-event';
import { NoteClickEvent } from './events/note-click-event';
import { NoteHoverEvent } from './events/note-hover-event';
import { NoteLeaveEvent } from './events/note-leave-event';
import { PaneRenderEvent } from './events/pane-render-event';
import { PlotAreaClickEvent } from './events/plot-area-click-event';
import { PlotAreaHoverEvent } from './events/plot-area-hover-event';
import { PlotAreaLeaveEvent } from './events/plot-area-leave-event';
import { RenderEvent } from './events/render-event';
import { SelectEndEvent } from './events/select-end-event';
import { SelectEvent } from './events/select-event';
import { SelectStartEvent } from './events/select-start-event';
import { SeriesClickEvent } from './events/series-click-event';
import { SeriesHoverEvent } from './events/series-hover-event';
import { SeriesOverEvent } from './events/series-over-event';
import { SeriesLeaveEvent } from './events/series-leave-event';
import { ZoomEndEvent } from './events/zoom-end-event';
import { ZoomEvent } from './events/zoom-event';
import { ZoomStartEvent } from './events/zoom-start-event';
/**
 * @hidden
 */
export declare abstract class ChartComponentGenerated implements OnChanges {
    configurationService: ConfigurationService;
    /**
     * Specifies if the Chart can be panned.
     */
    pannable: boolean | DragAction;
    /**
     * Sets the preferred rendering engine.
     * If not supported by the browser, the Chart switches to the first available mode.
     *
     * The supported values are:
     * - `"svg"`&mdash;If available, renders the component as an inline `.svg` file.
     * - `"canvas"`&mdash;If available, renders the component as a `canvas` element.
     */
    renderAs: 'svg' | 'canvas';
    /**
     * The default colors for the Chart series.
     * When all colors are used, new colors are pulled from the start again.
     */
    seriesColors: string[];
    /**
     * The configuration options or the text of the Chart title.
     */
    title: string | Title;
    /**
     * If set to `true`, the Chart plays animations when it displays the series.
     * By default, animations are enabled.
     */
    transitions: boolean;
    /**
     * Specifies if the Chart can be zoomed.
     */
    zoomable: boolean | Zoomable;
    /**
     * The default options for all Chart axes. Accepts the options which are supported by
     * [`categoryAxis`]({% slug api_charts_categoryaxisitemcomponent %}),
     * [`valueAxis`]({% slug api_charts_valueaxisitemcomponent %}),
     * [`xAxis`]({% slug api_charts_xaxisitemcomponent %}),
     * and [`yAxis`]({% slug api_charts_yaxisitemcomponent %}).
     */
    axisDefaults: AxisDefaults;
    /**
     * The configuration options of the category axis.
     */
    categoryAxis: CategoryAxis | CategoryAxis[];
    /**
     * The configuration options of the Chart area.
     * Represents the entire visible area of the Chart.
     */
    chartArea: ChartArea;
    /**
     * The configuration options of the Chart legend.
     */
    legend: Legend;
    /**
     * The configuration of the Chart panes.
     * Panes are used to split the Chart into two or more parts. The panes are ordered from top to bottom.
     * To associate each axis with a pane, set its `pane` option to the name of the desired pane.
     * Axis that do not have a specified pane are placed in the top (default) pane.
     * To move a series to the desired pane, associate them with an axis.
     */
    panes: Pane[];
    /**
     * The configuration options of the plot area.
     * The plot area is the area which displays the series.
     */
    plotArea: PlotArea;
    /**
     * The configuration of the Chart series.
     * The series type is determined by the value of the type field.
     * If a type value is missing, the Chart renders the type that is
     * specified in [`seriesDefaults`]({% slug api_charts_seriesdefaultscomponent %}).
     * Some options accept functions as arguments. These arguments are evaluated for each point
     * which is supplied as a parameter. If no value is returned, the Chart uses the `theme` or
     * [`seriesDefaults`]({% slug api_charts_seriesdefaultscomponent %}) values.
     */
    series: Series[];
    /**
     * The default options of all series.
     */
    seriesDefaults: SeriesDefaults;
    /**
     * The configuration options of the Chart series tooltips.
     * The tooltip of the Chart series is displayed when the
     * [`tooltip.visible`]({% slug api_charts_tooltipcomponent %}#toc-visible) option is set to `true`.
     */
    tooltip: Tooltip;
    /**
     * The configuration options of the value axis.
     */
    valueAxis: ValueAxis | ValueAxis[];
    /**
     * The configuration options of the Scatter Chart X-axis.
     * Supports all [`valueAxis`]({% slug api_charts_valueaxisitemcomponent %}) options.
     */
    xAxis: XAxis | XAxis[];
    /**
     * The configuration options of the Scatter Chart Y-axis.
     * Supports all [`valueAxis`]({% slug api_charts_valueaxisitemcomponent %}) options.
     */
    yAxis: YAxis | YAxis[];
    /**
     * Fires when the user clicks an axis label ([see example]({% slug overview_chart_charts %}#toc-events)).
     */
    axisLabelClick: EventEmitter<AxisLabelClickEvent>;
    /**
     * Fires as long as the user is dragging the Chart with the mouse or through swipe gestures.
     */
    drag: EventEmitter<DragEvent>;
    /**
     * Fires when the user stops dragging the Chart.
     */
    dragEnd: EventEmitter<DragEndEvent>;
    /**
     * Fires when the user starts dragging the Chart.
     */
    dragStart: EventEmitter<DragStartEvent>;
    /**
     * Fires when the user hovers over a legend item ([see example]({% slug overview_chart_charts %}#toc-events)).
     */
    legendItemHover: EventEmitter<LegendItemHoverEvent>;
    /**
     * Fires when the cursor leaves a legend item.
     */
    legendItemLeave: EventEmitter<LegendItemLeaveEvent>;
    /**
     * Fires when the user clicks a note.
     */
    noteClick: EventEmitter<NoteClickEvent>;
    /**
     * Fires when the user hovers over a note.
     */
    noteHover: EventEmitter<NoteHoverEvent>;
    /**
     * Fires when the cursor leaves a note.
     */
    noteLeave: EventEmitter<NoteLeaveEvent>;
    /**
     * Fires when a pane is rendered because the Chart:
     * * Is rendered.
     * * Performs panning or zooming.
     * * Is exported with different options.
     * The event is used to render custom visuals in the panes.
     */
    paneRender: EventEmitter<PaneRenderEvent>;
    /**
     * Fires when the user clicks the plot area ([see example]({% slug overview_chart_charts %}#toc-events)).
     * The `click` event is triggered by the `tap` and `contextmenu` events.
     * To distinguish between the original events, inspect the `e.originalEvent.type` field.
     */
    plotAreaClick: EventEmitter<PlotAreaClickEvent>;
    /**
     * Fires when the user hovers the plot area ([see example]({% slug overview_chart_charts %}#toc-events)).
     */
    plotAreaHover: EventEmitter<PlotAreaHoverEvent>;
    /**
     * Fires when the cursor leaves the plot area.
     */
    plotAreaLeave: EventEmitter<PlotAreaLeaveEvent>;
    /**
     * Fires when the Chart is ready to render on screen ([see example]({% slug overview_chart_charts %}#toc-events)).
     * For example, you can use it to remove loading indicators.
     * Any changes made to the options are ignored.
     */
    render: EventEmitter<RenderEvent>;
    /**
     * Fires when the user modifies the selection.
     *
     * The range units are:
     * - Generic axis&mdash;Category index (0-based).
     * - Date axis&mdash;Date instance.
     */
    select: EventEmitter<SelectEvent>;
    /**
     * Fires when the user completes the modification of the selection.
     *
     * The range units are:
     * - Generic axis&mdash;Category index (0-based).
     * - Date axis&mdash;Date instance.
     */
    selectEnd: EventEmitter<SelectEndEvent>;
    /**
     * Fires when the user starts modifying the axis selection.
     *
     * The range units are:
     * - Generic axis&mdash;Category index (0-based).
     * - Date axis&mdash;Date instance.
     */
    selectStart: EventEmitter<SelectStartEvent>;
    /**
     * Fires when the user clicks the Chart series.
     *
     * The `click` event will be triggered by the `tap` and `contextmenu` events ([see example]({% slug overview_chart_charts %}#toc-events)).
     * To distinguish between the original events, inspect the `e.originalEvent.type` field.
     */
    seriesClick: EventEmitter<SeriesClickEvent>;
    /**
     * Fires when the user hovers the Chart series ([see example]({% slug overview_chart_charts %}#toc-events)).
     */
    seriesHover: EventEmitter<SeriesHoverEvent>;
    /**
     * Fires when the cursor enters a series.
     */
    seriesOver: EventEmitter<SeriesOverEvent>;
    /**
     * Fires when the cursor leaves a series.
     */
    seriesLeave: EventEmitter<SeriesLeaveEvent>;
    /**
     * Fires as long as the user is zooming the Chart by using the mousewheel operation.
     */
    zoom: EventEmitter<ZoomEvent>;
    /**
     * Fires when the user stops zooming the Chart.
     */
    zoomEnd: EventEmitter<ZoomEndEvent>;
    /**
     * Fires when the user uses the mousewheel to zoom the Chart.
     */
    zoomStart: EventEmitter<ZoomStartEvent>;
    instance: any;
    constructor(configurationService: ConfigurationService);
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
}
