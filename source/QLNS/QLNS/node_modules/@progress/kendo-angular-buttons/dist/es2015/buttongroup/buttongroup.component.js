import { ButtonDirective } from '../button/button.directive';
import { Component, Input, ContentChildren, HostBinding, HostListener, isDevMode } from '@angular/core';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { KendoButtonService } from '../button/button.service';
import { isPresent } from '../util';
import { Keys } from '../navigation/keys';
/**
 * @hidden
 */
const ariaChecked = 'aria-checked';
/**
 * @hidden
 */
const role = 'role';
/**
 * @hidden
 */
const tabindex = 'tabindex';
/**
 * Represents the Kendo UI ButtonGroup component for Angular.
 */
export class ButtonGroupComponent {
    constructor(service, localization) {
        this.service = service;
        /**
         * By default, the selection mode of the ButtonGroup is set to `multiple`.
         */
        this.selection = 'multiple';
        /**
         * Changes the visual appearance by using alternative styling options.
         * The available values are:
         * * `bare`
         * * `flat`
         * * `outline`
         *
         * The `look` property of the ButtonGroup takes precedence over the `look` property
         * of the individual buttons that are part of the group.
         */
        this.look = 'default';
        this.localizationChangeSubscription = localization.changes.subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    get wrapperClass() {
        return true;
    }
    get disabledClass() {
        return this.disabled;
    }
    get stretchedClass() {
        return !!this.width;
    }
    get isBare() {
        return this.look === 'bare';
    }
    get isFlat() {
        return this.look === 'flat';
    }
    get isOutline() {
        return this.look === 'outline';
    }
    get getRole() {
        return this.isSelectionSingle() ? 'radiogroup' : 'group';
    }
    get dir() {
        return this.direction;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get wrapperWidth() {
        return this.width;
    }
    /**
     * @hidden
     */
    keydown(event) {
        if (this.isSelectionSingle()) {
            const selectedIndex = this.buttons.toArray().findIndex(current => current.selected);
            const firstIndex = 0;
            const lastIndex = this.buttons.length - 1;
            if (selectedIndex !== undefined) {
                if (event.keyCode === Keys.right && selectedIndex < lastIndex) {
                    this.deactivate(this.buttons.filter(current => current.selected));
                    this.activate(this.buttons.filter((_current, index) => {
                        return index === selectedIndex + 1;
                    }));
                }
                if (event.keyCode === Keys.left && selectedIndex > firstIndex) {
                    this.deactivate(this.buttons.filter(current => current.selected));
                    this.activate(this.buttons.filter((_current, index) => {
                        return index === selectedIndex - 1;
                    }));
                }
            }
        }
    }
    ngOnInit() {
        this.subscription = this.service.buttonClicked$.subscribe((button) => {
            if (this.isSelectionSingle()) {
                this.deactivate(this.buttons.filter(current => current !== button));
                button.setSelected(true);
            }
            else {
                button.setSelected(!button.selected);
            }
            button.setAttribute(ariaChecked, button.selected.toString());
            button.setAttribute(tabindex, button.tabIndex.toString());
        });
    }
    ngAfterContentInit() {
        const isRadioGroup = this.isSelectionSingle();
        const buttonsRole = isRadioGroup ? 'radio' : 'checkbox';
        let anyChecked = false;
        this.buttons.forEach((button) => {
            button.setAttribute(ariaChecked, button.selected.toString());
            button.setAttribute(role, buttonsRole);
            if (isPresent(this.disabled)) {
                button.disabled = this.disabled;
            }
            if (this.look !== 'default') {
                button.look = this.look;
            }
            if (!isRadioGroup || button.selected) {
                button.setAttribute(tabindex, button.tabIndex.toString());
            }
            else if (isRadioGroup && !button.selected) {
                button.setAttribute(tabindex, "-1");
            }
            anyChecked = anyChecked || button.selected;
        });
        if (isRadioGroup && !anyChecked) {
            this.buttons.first.setAttribute(tabindex, this.buttons.first.tabIndex.toString());
            this.buttons.last.setAttribute(tabindex, this.buttons.last.tabIndex.toString());
        }
    }
    ngAfterViewChecked() {
        if (this.buttons.length) {
            this.buttons.first.renderer.addClass(this.buttons.first.element, 'k-group-start');
            this.buttons.last.renderer.addClass(this.buttons.last.element, 'k-group-end');
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.localizationChangeSubscription.unsubscribe();
    }
    ngAfterContentChecked() {
        this.verifySettings();
    }
    deactivate(buttons) {
        buttons.forEach((button) => {
            button.setSelected(false);
            button.setAttribute(ariaChecked, button.selected.toString());
            button.setAttribute(tabindex, "-1");
        });
    }
    activate(buttons) {
        buttons.forEach((button) => {
            button.setSelected(true);
            button.setAttribute(ariaChecked, button.selected.toString());
            button.setAttribute(tabindex, "0");
            button.focus();
        });
    }
    verifySettings() {
        if (isDevMode()) {
            if (this.isSelectionSingle() && this.buttons.filter(button => button.selected).length > 1) {
                throw new Error('Having multiple selected buttons with single selection mode is not supported');
            }
        }
    }
    isSelectionSingle() {
        return this.selection === 'single';
    }
}
ButtonGroupComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoButtonGroup',
                providers: [
                    KendoButtonService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.buttongroup'
                    }
                ],
                selector: 'kendo-buttongroup',
                template: `
        <ng-content select="[kendoButton]"></ng-content>
    `
            },] },
];
/** @nocollapse */
ButtonGroupComponent.ctorParameters = () => [
    { type: KendoButtonService, },
    { type: LocalizationService, },
];
ButtonGroupComponent.propDecorators = {
    'disabled': [{ type: Input, args: ['disabled',] },],
    'selection': [{ type: Input, args: ['selection',] },],
    'width': [{ type: Input, args: ['width',] },],
    'look': [{ type: Input },],
    'buttons': [{ type: ContentChildren, args: [ButtonDirective,] },],
    'wrapperClass': [{ type: HostBinding, args: ['class.k-button-group',] },],
    'disabledClass': [{ type: HostBinding, args: ['class.k-state-disabled',] },],
    'stretchedClass': [{ type: HostBinding, args: ['class.k-button-group-stretched',] },],
    'isBare': [{ type: HostBinding, args: ['class.k-button-group-bare',] },],
    'isFlat': [{ type: HostBinding, args: ['class.k-button-group-flat',] },],
    'isOutline': [{ type: HostBinding, args: ['class.k-button-group-outline',] },],
    'getRole': [{ type: HostBinding, args: ['attr.role',] },],
    'dir': [{ type: HostBinding, args: ['attr.dir',] },],
    'ariaDisabled': [{ type: HostBinding, args: ['attr.aria-disalbed',] },],
    'wrapperWidth': [{ type: HostBinding, args: ['style.width',] },],
    'keydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
